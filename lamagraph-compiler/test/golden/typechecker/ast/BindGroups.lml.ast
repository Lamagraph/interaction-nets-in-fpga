(Module
 ~-: int -> int
 >=: int -> int -> bool
 a: string
 /: int -> int -> int
 *: int -> int -> int
 ::: forall 'a. ('a * 'a list) -> 'a list
 <: int -> int -> bool
 []: forall 'a. 'a list
 h: int -> int
 b: int
 -: int -> int -> int
 e: int
 +: int -> int -> int
 >: int -> int -> bool
 id: int -> int
 <=: int -> int -> bool
 Some: forall 'a. 'a -> 'a option
 odd: int -> bool
 None: forall 'a. 'a option
 false: bool
 true: bool
 f: int option -> int option
 print_int: int -> ()
 even: int -> bool
 (Just
 (L
  { :1:8-18 }
  ("BindGroups")))
 [ (L
    { :(3,1)-(5,4) }
    (ValD
     (L
      { :(3,5)-(5,4) }
      (NonRec
       [ (L
          { :(3,5)-(5,4) }
          (Bind
           f: int
           (L
            { :3:5-6 }
            (PatVar
             int
             (L
              { :3:5-6 }
              "f")))
           (L
            { :(4,3)-(5,4) }
            (ExprLet
             int
             (L
              { :4:7-12 }
              (NonRec
               [ (L
                  { :4:7-12 }
                  (Bind
                   x: int
                   (L
                    { :4:7-8 }
                    (PatVar
                     int
                     (L
                      { :4:7-8 }
                      "x")))
                   (L
                    { :4:11-12 }
                    (ExprConstant int int
                     5)))) ]))
             (L
              { :5:3-4 }
              (ExprIdent
               int
               "x")))))) ]))))
 , (L
    { :7:1-20 }
    (ValD
     (L
      { :7:5-20 }
      (NonRec
       [ (L
          { :7:5-20 }
          (Bind
           a: int
           b: int
           (L
            { :7:5-11 }
            (PatTuple
             (int * int)
             [ (L
                { :7:6-7 }
                (PatVar
                 int
                 (L
                  { :7:6-7 }
                  "a")))
             , (L
                { :7:9-10 }
                (PatVar
                 int
                 (L
                  { :7:9-10 }
                  "b"))) ]))
           (L
            { :7:14-20 }
            (ExprTuple
             (int * int)
             [ (L
                { :7:15-16 }
                (ExprConstant int int
                 1))
             , (L
                { :7:18-19 }
                (ExprConstant int int
                 1)) ])))) ]))))
 , (L
    { :9:1-47 }
    (ValD
     (L
      { :9:5-47 }
      (NonRec
       [ (L
          { :9:5-47 }
          (Bind
           h: int -> int
           e: int
           id: int -> int
           f: int
           (L
            { :9:5-34 }
            (PatConstraint
             int -> int
             (L
              { :9:6-22 }
              (PatConstraint
               int -> int
               (L
                { :9:7-9 }
                (PatVar
                 'h
                 (L
                  { :9:7-9 }
                  "id")))
               (L
                { :9:12-21 }
                (TyArrow
                 int -> int
                 (L
                  { :9:12-14 }
                  (TyVar
                   int
                   (L
                    { :9:13-14 }
                    "a")))
                 (L
                  { :9:18-21 }
                  (TyConstr
                   int
                   (L
                    { :9:18-21 }
                    ("int"))
                   []))))))
             (L
              { :9:25-33 }
              (TyArrow
               'e -> 'f
               (L
                { :9:25-27 }
                (TyVar
                 'e
                 (L
                  { :9:26-27 }
                  "c")))
               (L
                { :9:31-33 }
                (TyVar
                 'f
                 (L
                  { :9:32-33 }
                  "c")))))))
           (L
            { :9:41-47 }
            (ExprFunction
             int -> int
             (L
              { :9:41-42 }
              (PatVar
               int
               (L
                { :9:41-42 }
                "x")))
             (L
              { :9:46-47 }
              (ExprIdent
               int
               "x")))))) ]))))
 , (L
    { :11:1-10 }
    (ValD
     (L
      { :11:5-10 }
      (NonRec
       [ (L
          { :11:5-10 }
          (Bind
           a: int
           (L
            { :11:5-6 }
            (PatVar
             int
             (L
              { :11:5-6 }
              "a")))
           (L
            { :11:9-10 }
            (ExprConstant int int
             1)))) ]))))
 , (L
    { :13:1-14 }
    (ValD
     (L
      { :13:5-14 }
      (NonRec
       [ (L
          { :13:5-14 }
          (Bind
           a: string
           (L
            { :13:5-6 }
            (PatVar
             string
             (L
              { :13:5-6 }
              "a")))
           (L
            { :13:9-14 }
            (ExprConstant string string
             "str")))) ]))))
 , (L
    { :(15,1)-(22,24) }
    (ValD
     (L
      { :(15,5)-(22,24) }
      (Rec
       [ (L
          { :(15,9)-(18,23) }
          (Bind
           even: int -> bool
           (L
            { :15:9-13 }
            (PatVar
             int -> bool
             (L
              { :15:9-13 }
              "even")))
           (L
            { :(15,14)-(18,23) }
            (ExprFunction
             int -> bool
             (L
              { :15:14-15 }
              (PatVar
               int
               (L
                { :15:14-15 }
                "n")))
             (L
              { :(16,3)-(18,23) }
              (ExprMatch
               bool
               (L
                { :16:9-10 }
                (ExprIdent
                 int
                 "n"))
               [ (L
                  { :17:7-16 }
                  (Case
                   int -> bool
                   (L
                    { :17:7-8 }
                    (PatConstant
                     int
                     int
                     0))
                   (Nothing)
                   (L
                    { :17:12-16 }
                    (ExprConstruct
                     bool
                     (L
                      { :17:12-16 }
                      ("true"))
                     (Nothing)))))
               , (L
                  { :18:7-23 }
                  (Case
                   int -> bool
                   (L
                    { :18:7-8 }
                    (PatVar
                     int
                     (L
                      { :18:7-8 }
                      "x")))
                   (Nothing)
                   (L
                    { :18:12-23 }
                    (ExprApply
                     bool
                     (L
                      { :18:12-15 }
                      (ExprIdent
                       int -> bool
                       "odd"))
                     [ (L
                        { :18:16-23 }
                        (ExprApply
                         int
                         (L
                          { :18:19-20 }
                          (ExprIdent
                           int -> int -> int
                           "-"))
                         [ (L
                            { :18:17-18 }
                            (ExprIdent
                             int
                             "x"))
                         , (L
                            { :18:21-22 }
                            (ExprConstant int int
                             1)) ])) ])))) ]))))))
       , (L
          { :(19,5)-(22,24) }
          (Bind
           odd: int -> bool
           (L
            { :19:5-8 }
            (PatVar
             int -> bool
             (L
              { :19:5-8 }
              "odd")))
           (L
            { :(19,9)-(22,24) }
            (ExprFunction
             int -> bool
             (L
              { :19:9-10 }
              (PatVar
               int
               (L
                { :19:9-10 }
                "n")))
             (L
              { :(20,3)-(22,24) }
              (ExprMatch
               bool
               (L
                { :20:9-10 }
                (ExprIdent
                 int
                 "n"))
               [ (L
                  { :21:7-17 }
                  (Case
                   int -> bool
                   (L
                    { :21:7-8 }
                    (PatConstant
                     int
                     int
                     0))
                   (Nothing)
                   (L
                    { :21:12-17 }
                    (ExprConstruct
                     bool
                     (L
                      { :21:12-17 }
                      ("false"))
                     (Nothing)))))
               , (L
                  { :22:7-24 }
                  (Case
                   int -> bool
                   (L
                    { :22:7-8 }
                    (PatVar
                     int
                     (L
                      { :22:7-8 }
                      "x")))
                   (Nothing)
                   (L
                    { :22:12-24 }
                    (ExprApply
                     bool
                     (L
                      { :22:12-16 }
                      (ExprIdent
                       int -> bool
                       "even"))
                     [ (L
                        { :22:17-24 }
                        (ExprApply
                         int
                         (L
                          { :22:20-21 }
                          (ExprIdent
                           int -> int -> int
                           "-"))
                         [ (L
                            { :22:18-19 }
                            (ExprIdent
                             int
                             "x"))
                         , (L
                            { :22:22-23 }
                            (ExprConstant int int
                             1)) ])) ])))) ])))))) ]))))
 , (L
    { :(24,1)-(27,19) }
    (ValD
     (L
      { :(24,5)-(27,19) }
      (NonRec
       [ (L
          { :(24,5)-(27,19) }
          (Bind
           f: int option -> int option
           (L
            { :24:5-6 }
            (PatVar
             int option -> int option
             (L
              { :24:5-6 }
              "f")))
           (L
            { :(24,7)-(27,19) }
            (ExprFunction
             int option -> int option
             (L
              { :24:7-8 }
              (PatVar
               int option
               (L
                { :24:7-8 }
                "x")))
             (L
              { :(24,11)-(27,19) }
              (ExprMatch
               int option
               (L
                { :24:17-18 }
                (ExprIdent
                 int option
                 "x"))
               [ (L
                  { :25:7-33 }
                  (Case
                   int option -> int option
                   (L
                    { :25:7-13 }
                    (PatConstruct
                     int option
                     (L
                      { :25:7-11 }
                      ("Some"))
                     (Just
                     (L
                      { :25:12-13 }
                      (PatVar
                       int
                       (L
                        { :25:12-13 }
                        "a"))))))
                   (Just
                   (L
                    { :25:19-25 }
                    (ExprApply
                     bool
                     (L
                      { :25:21-23 }
                      (ExprIdent
                       int -> int -> bool
                       "<="))
                     [ (L
                        { :25:19-20 }
                        (ExprIdent
                         int
                         "a"))
                     , (L
                        { :25:24-25 }
                        (ExprConstant int int
                         0)) ])))
                   (L
                    { :25:29-33 }
                    (ExprConstruct
                     int option
                     (L
                      { :25:29-33 }
                      ("None"))
                     (Nothing)))))
               , (L
                  { :26:7-23 }
                  (Case
                   int option -> int option
                   (L
                    { :26:7-13 }
                    (PatConstruct
                     int option
                     (L
                      { :26:7-11 }
                      ("Some"))
                     (Just
                     (L
                      { :26:12-13 }
                      (PatVar
                       int
                       (L
                        { :26:12-13 }
                        "a"))))))
                   (Nothing)
                   (L
                    { :26:17-23 }
                    (ExprConstruct
                     int option
                     (L
                      { :26:17-21 }
                      ("Some"))
                     (Just
                     (L
                      { :26:22-23 }
                      (ExprIdent
                       int
                       "a")))))))
               , (L
                  { :27:7-19 }
                  (Case
                   int option -> int option
                   (L
                    { :27:7-11 }
                    (PatConstruct
                     int option
                     (L
                      { :27:7-11 }
                      ("None"))
                     (Nothing)))
                   (Nothing)
                   (L
                    { :27:15-19 }
                    (ExprConstruct
                     int option
                     (L
                      { :27:15-19 }
                      ("None"))
                     (Nothing))))) ])))))) ])))) ])