module Types

type unit

type 'a alias = (int -> ('a list -> 'a))

type data = C1 of int | C2

type 'a list = [] of 'a | (::) of 'a * 'a list

type ('a, 'b) either = Left of 'a | Right of 'b

type someTuple = T of (int * int)

type ('a, 'b, 'c) weirdTupleAlias = ((('a * 'b) list -> ('c, 'b) either list) ->
((('a -> 'b), 'c) either -> 'c))

type tooMuchConstrs = C1 of (int -> (int list -> int either))
                    | C2 of (tooMuchConstrs -> int32)
                    | C3 of bool

type 'a _t = int