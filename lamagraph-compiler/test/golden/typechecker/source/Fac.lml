module Fac

let fac n =
  let rec helper = fun m acc ->
    if m > n then acc
    else helper (m + 1) (acc * m) in
  helper 1 1

let rec fac' n =
  if n < 2 then 1 else n * fac' (n - 1)

let rec (fix : (('a -> 'b) -> 'a -> 'b) -> 'a -> 'b) = fun f x -> f (fix f) x
let rec fixCBV = fun f x -> f (fixCBV f) x
let rec fixCBN = fun f -> f (fixCBN f)


let fac'' self n = if n<=1 then 1 else n * self (n - 1)
