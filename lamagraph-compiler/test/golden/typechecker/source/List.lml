module List

let (|>) x f = f x

let reverse l =
  let rec helper l acc = match l with
    | [] -> acc
    | hd :: tl ->  helper tl (hd :: acc)
  in helper l []

let head l = match l with hd :: tl -> hd

let l1 = [1; 2; 3]
let t1 = print_int (head (reverse l1))
let t2 = ((reverse l1) |> head) |> print_int
