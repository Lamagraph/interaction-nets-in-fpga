(Module
 <: int -> int -> bool
 false: bool
 -: int -> int -> int
 >: int -> int -> bool
 /: int -> int -> int
 true: bool
 None: forall 'a. 'a option
 +: int -> int -> int
 []: forall 'a. 'a list
 fixCBV: (('ad -> 'ae) -> 'ad -> 'ae) -> 'ad -> 'ae
 fac'': (int -> int) -> int -> int
 >=: int -> int -> bool
 print_int: int -> ()
 fixCBN: ('aj -> 'aj) -> 'aj
 fac: int -> int
 Some: forall 'a. 'a -> 'a option
 *: int -> int -> int
 <=: int -> int -> bool
 ::: forall 'a. ('a * 'a list) -> 'a list
 fix: (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
 w: (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
 fac': int -> int
 ~-: int -> int
 (Just
 (L
  { :1:8-11 }
  ("Fac")))
 [ (L
    { :(3,1)-(7,13) }
    (ValD
     (L
      { :(3,5)-(7,13) }
      (NonRec
       [ (L
          { :(3,5)-(7,13) }
          (Bind
           fac: int -> int
           (L
            { :3:5-8 }
            (PatVar
             int -> int
             (L
              { :3:5-8 }
              "fac")))
           (L
            { :(3,9)-(7,13) }
            (ExprFunction
             int -> int
             (L
              { :3:9-10 }
              (PatVar
               int
               (L
                { :3:9-10 }
                "n")))
             (L
              { :(4,3)-(7,13) }
              (ExprLet
               int
               (L
                { :(4,7)-(6,34) }
                (Rec
                 [ (L
                    { :(4,11)-(6,34) }
                    (Bind
                     helper: int -> int -> int
                     (L
                      { :4:11-17 }
                      (PatVar
                       int -> int -> int
                       (L
                        { :4:11-17 }
                        "helper")))
                     (L
                      { :(4,24)-(6,34) }
                      (ExprFunction
                       int -> int -> int
                       (L
                        { :4:24-25 }
                        (PatVar
                         int
                         (L
                          { :4:24-25 }
                          "m")))
                       (L
                        { :(4,26)-(6,34) }
                        (ExprFunction
                         int -> int
                         (L
                          { :4:26-29 }
                          (PatVar
                           int
                           (L
                            { :4:26-29 }
                            "acc")))
                         (L
                          { :(5,5)-(6,34) }
                          (ExprITE
                           int
                           (L
                            { :5:8-13 }
                            (ExprApply
                             bool
                             (L
                              { :5:10-11 }
                              (ExprIdent
                               int -> int -> bool
                               ">"))
                             [ (L
                                { :5:8-9 }
                                (ExprIdent
                                 int
                                 "m"))
                             , (L
                                { :5:12-13 }
                                (ExprIdent
                                 int
                                 "n")) ]))
                           (L
                            { :5:19-22 }
                            (ExprIdent
                             int
                             "acc"))
                           (L
                            { :6:10-34 }
                            (ExprApply
                             int
                             (L
                              { :6:10-16 }
                              (ExprIdent
                               int -> int -> int
                               "helper"))
                             [ (L
                                { :6:17-24 }
                                (ExprApply
                                 int
                                 (L
                                  { :6:20-21 }
                                  (ExprIdent
                                   int -> int -> int
                                   "+"))
                                 [ (L
                                    { :6:18-19 }
                                    (ExprIdent
                                     int
                                     "m"))
                                 , (L
                                    { :6:22-23 }
                                    (ExprConstant int int
                                     1)) ]))
                             , (L
                                { :6:25-34 }
                                (ExprApply
                                 int
                                 (L
                                  { :6:30-31 }
                                  (ExprIdent
                                   int -> int -> int
                                   "*"))
                                 [ (L
                                    { :6:26-29 }
                                    (ExprIdent
                                     int
                                     "acc"))
                                 , (L
                                    { :6:32-33 }
                                    (ExprIdent
                                     int
                                     "m")) ])) ])))))))))) ]))
               (L
                { :7:3-13 }
                (ExprApply
                 int
                 (L
                  { :7:3-9 }
                  (ExprIdent
                   int -> int -> int
                   "helper"))
                 [ (L
                    { :7:10-11 }
                    (ExprConstant int int
                     1))
                 , (L
                    { :7:12-13 }
                    (ExprConstant int int
                     1)) ])))))))) ]))))
 , (L
    { :(9,1)-(10,40) }
    (ValD
     (L
      { :(9,5)-(10,40) }
      (Rec
       [ (L
          { :(9,9)-(10,40) }
          (Bind
           fac': int -> int
           (L
            { :9:9-13 }
            (PatVar
             int -> int
             (L
              { :9:9-13 }
              "fac'")))
           (L
            { :(9,14)-(10,40) }
            (ExprFunction
             int -> int
             (L
              { :9:14-15 }
              (PatVar
               int
               (L
                { :9:14-15 }
                "n")))
             (L
              { :10:3-40 }
              (ExprITE
               int
               (L
                { :10:6-11 }
                (ExprApply
                 bool
                 (L
                  { :10:8-9 }
                  (ExprIdent
                   int -> int -> bool
                   "<"))
                 [ (L
                    { :10:6-7 }
                    (ExprIdent
                     int
                     "n"))
                 , (L
                    { :10:10-11 }
                    (ExprConstant int int
                     2)) ]))
               (L
                { :10:17-18 }
                (ExprConstant int int
                 1))
               (L
                { :10:24-40 }
                (ExprApply
                 int
                 (L
                  { :10:26-27 }
                  (ExprIdent
                   int -> int -> int
                   "*"))
                 [ (L
                    { :10:24-25 }
                    (ExprIdent
                     int
                     "n"))
                 , (L
                    { :10:28-40 }
                    (ExprApply
                     int
                     (L
                      { :10:28-32 }
                      (ExprIdent
                       int -> int
                       "fac'"))
                     [ (L
                        { :10:33-40 }
                        (ExprApply
                         int
                         (L
                          { :10:36-37 }
                          (ExprIdent
                           int -> int -> int
                           "-"))
                         [ (L
                            { :10:34-35 }
                            (ExprIdent
                             int
                             "n"))
                         , (L
                            { :10:38-39 }
                            (ExprConstant int int
                             1)) ])) ])) ])))))))) ]))))
 , (L
    { :12:1-78 }
    (ValD
     (L
      { :12:5-78 }
      (Rec
       [ (L
          { :12:9-78 }
          (Bind
           fix: (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
           w: (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
           (L
            { :12:9-53 }
            (PatConstraint
             (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
             (L
              { :12:10-13 }
              (PatVar
               'w
               (L
                { :12:10-13 }
                "fix")))
             (L
              { :12:16-52 }
              (TyArrow
               (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
               (L
                { :12:16-40 }
                (TyArrow
                 ('u -> 'v) -> 'u -> 'v
                 (L
                  { :12:17-27 }
                  (TyArrow
                   'u -> 'v
                   (L
                    { :12:18-20 }
                    (TyVar
                     'u
                     (L
                      { :12:19-20 }
                      "a")))
                   (L
                    { :12:24-26 }
                    (TyVar
                     'v
                     (L
                      { :12:25-26 }
                      "b")))))
                 (L
                  { :12:31-39 }
                  (TyArrow
                   'u -> 'v
                   (L
                    { :12:31-33 }
                    (TyVar
                     'u
                     (L
                      { :12:32-33 }
                      "a")))
                   (L
                    { :12:37-39 }
                    (TyVar
                     'v
                     (L
                      { :12:38-39 }
                      "b")))))))
               (L
                { :12:44-52 }
                (TyArrow
                 'u -> 'v
                 (L
                  { :12:44-46 }
                  (TyVar
                   'u
                   (L
                    { :12:45-46 }
                    "a")))
                 (L
                  { :12:50-52 }
                  (TyVar
                   'v
                   (L
                    { :12:51-52 }
                    "b")))))))))
           (L
            { :12:60-78 }
            (ExprFunction
             (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
             (L
              { :12:60-61 }
              (PatVar
               ('u -> 'v) -> 'u -> 'v
               (L
                { :12:60-61 }
                "f")))
             (L
              { :12:62-78 }
              (ExprFunction
               'u -> 'v
               (L
                { :12:62-63 }
                (PatVar
                 'u
                 (L
                  { :12:62-63 }
                  "x")))
               (L
                { :12:67-78 }
                (ExprApply
                 'v
                 (L
                  { :12:67-68 }
                  (ExprIdent
                   ('u -> 'v) -> 'u -> 'v
                   "f"))
                 [ (L
                    { :12:69-76 }
                    (ExprApply
                     'u -> 'v
                     (L
                      { :12:70-73 }
                      (ExprIdent
                       (('u -> 'v) -> 'u -> 'v) -> 'u -> 'v
                       "fix"))
                     [ (L
                        { :12:74-75 }
                        (ExprIdent
                         ('u -> 'v) -> 'u -> 'v
                         "f")) ]))
                 , (L
                    { :12:77-78 }
                    (ExprIdent
                     'u
                     "x")) ])))))))) ]))))
 , (L
    { :13:1-43 }
    (ValD
     (L
      { :13:5-43 }
      (Rec
       [ (L
          { :13:9-43 }
          (Bind
           fixCBV: (('ad -> 'ae) -> 'ad -> 'ae) -> 'ad -> 'ae
           (L
            { :13:9-15 }
            (PatVar
             (('ad -> 'ae) -> 'ad -> 'ae) -> 'ad -> 'ae
             (L
              { :13:9-15 }
              "fixCBV")))
           (L
            { :13:22-43 }
            (ExprFunction
             (('ad -> 'ae) -> 'ad -> 'ae) -> 'ad -> 'ae
             (L
              { :13:22-23 }
              (PatVar
               ('ad -> 'ae) -> 'ad -> 'ae
               (L
                { :13:22-23 }
                "f")))
             (L
              { :13:24-43 }
              (ExprFunction
               'ad -> 'ae
               (L
                { :13:24-25 }
                (PatVar
                 'ad
                 (L
                  { :13:24-25 }
                  "x")))
               (L
                { :13:29-43 }
                (ExprApply
                 'ae
                 (L
                  { :13:29-30 }
                  (ExprIdent
                   ('ad -> 'ae) -> 'ad -> 'ae
                   "f"))
                 [ (L
                    { :13:31-41 }
                    (ExprApply
                     'ad -> 'ae
                     (L
                      { :13:32-38 }
                      (ExprIdent
                       (('ad -> 'ae) -> 'ad -> 'ae) -> 'ad -> 'ae
                       "fixCBV"))
                     [ (L
                        { :13:39-40 }
                        (ExprIdent
                         ('ad -> 'ae) -> 'ad -> 'ae
                         "f")) ]))
                 , (L
                    { :13:42-43 }
                    (ExprIdent
                     'ad
                     "x")) ])))))))) ]))))
 , (L
    { :14:1-39 }
    (ValD
     (L
      { :14:5-39 }
      (Rec
       [ (L
          { :14:9-39 }
          (Bind
           fixCBN: ('aj -> 'aj) -> 'aj
           (L
            { :14:9-15 }
            (PatVar
             ('aj -> 'aj) -> 'aj
             (L
              { :14:9-15 }
              "fixCBN")))
           (L
            { :14:22-39 }
            (ExprFunction
             ('aj -> 'aj) -> 'aj
             (L
              { :14:22-23 }
              (PatVar
               'aj -> 'aj
               (L
                { :14:22-23 }
                "f")))
             (L
              { :14:27-39 }
              (ExprApply
               'aj
               (L
                { :14:27-28 }
                (ExprIdent
                 'aj -> 'aj
                 "f"))
               [ (L
                  { :14:29-39 }
                  (ExprApply
                   'aj
                   (L
                    { :14:30-36 }
                    (ExprIdent
                     ('aj -> 'aj) -> 'aj
                     "fixCBN"))
                   [ (L
                      { :14:37-38 }
                      (ExprIdent
                       'aj -> 'aj
                       "f")) ])) ])))))) ]))))
 , (L
    { :17:1-56 }
    (ValD
     (L
      { :17:5-56 }
      (NonRec
       [ (L
          { :17:5-56 }
          (Bind
           fac'': (int -> int) -> int -> int
           (L
            { :17:5-10 }
            (PatVar
             (int -> int) -> int -> int
             (L
              { :17:5-10 }
              "fac''")))
           (L
            { :17:11-56 }
            (ExprFunction
             (int -> int) -> int -> int
             (L
              { :17:11-15 }
              (PatVar
               int -> int
               (L
                { :17:11-15 }
                "self")))
             (L
              { :17:16-56 }
              (ExprFunction
               int -> int
               (L
                { :17:16-17 }
                (PatVar
                 int
                 (L
                  { :17:16-17 }
                  "n")))
               (L
                { :17:20-56 }
                (ExprITE
                 int
                 (L
                  { :17:23-27 }
                  (ExprApply
                   bool
                   (L
                    { :17:24-26 }
                    (ExprIdent
                     int -> int -> bool
                     "<="))
                   [ (L
                      { :17:23-24 }
                      (ExprIdent
                       int
                       "n"))
                   , (L
                      { :17:26-27 }
                      (ExprConstant int int
                       1)) ]))
                 (L
                  { :17:33-34 }
                  (ExprConstant int int
                   1))
                 (L
                  { :17:40-56 }
                  (ExprApply
                   int
                   (L
                    { :17:42-43 }
                    (ExprIdent
                     int -> int -> int
                     "*"))
                   [ (L
                      { :17:40-41 }
                      (ExprIdent
                       int
                       "n"))
                   , (L
                      { :17:44-56 }
                      (ExprApply
                       int
                       (L
                        { :17:44-48 }
                        (ExprIdent
                         int -> int
                         "self"))
                       [ (L
                          { :17:49-56 }
                          (ExprApply
                           int
                           (L
                            { :17:52-53 }
                            (ExprIdent
                             int -> int -> int
                             "-"))
                           [ (L
                              { :17:50-51 }
                              (ExprIdent
                               int
                               "n"))
                           , (L
                              { :17:54-55 }
                              (ExprConstant int int
                               1)) ])) ])) ])))))))))) ])))) ])