let mulAdd = fun x -> fun y -> fun z -> let t#q = (+ y) z in let t#n = (+ x) z
             in let t#k = (* t#n) t#q in let t#h = (+ x) y in (* t#h) t#k
let rec f = fun y -> let t#x = g y in let t#v = g y in (+ t#v) t#x
and
g = fun x -> let t#ab = (> x) 1 in match t#ab as t#a with ( true
                                   , []
                                   , let t#ag = (- x) 1 in f t#ag )
                                   | (false, [], 1)
let h = fun flag -> match flag as t#b with (true, [], * 2) | (false, [], + 100)
let t = h true