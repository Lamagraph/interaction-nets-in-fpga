let f = fun x -> match x as t#a with (1, [], 2)
                 | (2, [], 1)
                 | (DEFAULT, [], (* t#a) 7)
let h = fun x -> match x as t#b with ([], [], "Why empty?!")
                 | ( ::
                 , [hd, tl]
                 , match hd as t#c with (Some, [a], "We got Some!")
                   | (None, [], "None, no...") )
let g = fun x -> match x as t#d with ([], [], "Why empty?!")
                 | ( ::
                 , [hd, tl]
                 , match hd as t#e with (Some, [a], "We got Some!")
                   | (None, [], "None, no...") )
let v = :: ((Some 1), ([]))