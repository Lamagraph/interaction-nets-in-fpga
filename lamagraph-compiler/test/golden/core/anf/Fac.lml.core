let rec t#d = fun n -> fun m -> fun acc -> let t#h = (> m) n
              in match t#h as t#a with (true, [], acc)
                 | ( false
                 , []
                 , let t#q = (* acc) m in let t#n = (+ m) 1 in (t#d t#n) t#q )
let fac = fun n -> ((t#d n) 1) 1
let rec fac' = fun n -> let t#y = (< n) 2 in match t#y as t#b with (true, [], 1)
                                             | ( false
                                             , []
                                             , let t#ag = (- n) 1
                                             in let t#ad = fac' t#ag
                                             in (* n) t#ad )
let rec fix = fun f -> fun x -> let t#al = fix f in (f t#al) x
let rec fixCBV = fun f -> fun x -> let t#aq = fixCBV f in (f t#aq) x
let rec fixCBN = fun f -> let t#au = fixCBN f in f t#au
let fac'' = fun self -> fun n -> let t#ay = (<= n) 1
            in match t#ay as t#c with (true, [], 1)
               | ( false
               , []
               , let t#bg = (- n) 1 in let t#bd = self t#bg in (* n) t#bd )